@page "/categories/edit/{CategoryName}"
@using Travelex.Components.Layout
@using Travelex.Services
@using Travelex.Entities
@using Travelex.Extensions
@inject NavigationManager NavigationManager
@inject ExpenseService ExpenseService

<FlexedPageComponent>
    <TopBarLeft>
        <button @onclick="NavigateBack" class="p-2 text-[#252525]">
            <i class="fas fa-arrow-left text-xl"></i>
        </button>
    </TopBarLeft>
    <TopBarTitle>
        编辑分类
    </TopBarTitle>
    <PageBody>
        <div class="p-4">
            <div class="space-y-4">
                <div>
                    <label for="name" class="block text-sm font-medium text-[#1C160C] mb-1">分类名称</label>
                    <input type="text" id="name" @bind="_categoryName"
                           class="w-full px-4 py-2 rounded-lg border border-[#E8F0F2] focus:outline-none focus:border-[#119BED]"
                           placeholder="输入分类名称"/>
                </div>

                <div>
                    <label class="block text-sm font-medium text-[#1C160C] mb-1">选择图标</label>
                    <div class="grid grid-cols-4 gap-4">
                        @foreach (var icon in _availableIcons) {
                            <button @onclick="() => SelectIcon(icon)"
                                    class="w-12 h-12 rounded-lg border border-[#E8F0F2] hover:bg-[#F5F5F5] transition-colors duration-200 flex items-center justify-center @(icon == _selectedIcon ? "bg-[#E8F0F2]" : "bg-white")">
                                <img src="@($"images/expenseCategory/{icon}.svg")" alt="@icon" class="w-6 h-6 @(icon == _selectedIcon ? "" : "opacity-60")"/>
                            </button>
                        }
                    </div>
                </div>
            </div>

            <div class="mt-8 space-y-4">
                <button @onclick="SaveChanges" class="w-full py-3 bg-[#119BED] text-white font-bold rounded-[20px]">
                    保存修改
                </button>
                <button @onclick="DeleteCategory" class="w-full py-3 bg-[#E8F0F2] text-[#FF3B30] font-bold rounded-[20px]">
                    删除分类
                </button>
            </div>
        </div>
    </PageBody>
</FlexedPageComponent>

@code {
    [Parameter]
    public string CategoryName { get; set; } = "";

    private string _categoryName = "";
    private string _selectedIcon = "expense";
    private readonly string[] _availableIcons = [
        "car", "restaurant", "hotel", "store", "run", "joystick", 
        "beer", "book", "briefcase", "castle", "coffee", "dog", "home",
        "movie", "music", "party", "plane", "shield", "ship", "steam",
        "train", "wrench","expense"
    ];

    protected override async Task OnInitializedAsync()
    {
        _categoryName = CategoryName;
        // 加载分类信息
        var result = await ExpenseService.GetExpenseCategoryAsync(CategoryName);
        if (result is { IsSuccess: true, Data: not null })
        {
            _categoryName = result.Data.Name;
            _selectedIcon = result.Data.Icon;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateBack();
    }

    private void SelectIcon(string icon)
    {
        _selectedIcon = icon;
    }

    private async Task SaveChanges()
    {
        if (string.IsNullOrWhiteSpace(_categoryName))
            return;

        // 更新分类
        var result = await ExpenseService.UpdateExpenseCategoryAsync(CategoryName, new ExpenseCategory 
        { 
            Name = _categoryName,
            Icon = _selectedIcon
        });
        
        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/profile",replace:true);
        }
    }

    private async Task DeleteCategory()
    {
        var result = await ExpenseService.DeleteExpenseCategoryAsync(CategoryName);
        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/profile",replace:true);
        }
    }
}
