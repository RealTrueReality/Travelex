@page "/expense/add/{TripId:int}"
@using Travelex.Entities
@using Travelex.Services
@using Travelex.Utils
@using Travelex.Extensions
@inject NavigationManager NavigationManager
@inject ExpenseService ExpenseService
@inject BlazorMauiInterop BlazorMauiInterop

<FlexedPageComponent>
    <TopBarLeft>
        <button @onclick="NavigateBack" class="p-2 text-text-light dark:text-text-dark">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                 stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
    </TopBarLeft>
    <TopBarTitle>添加支出</TopBarTitle>
    <PageBody>
        <div class="flex-1 overflow-auto">
            <EditForm Model="@_expense" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator/>

                <!-- 标题 -->
                <div class="px-4 py-3">
                    <div class="mb-2">
                        <label class="text-base font-medium text-text-light dark:text-text-dark">标题</label>
                    </div>
                    <div class="relative">
                        <InputText @bind-Value="_expense.Title"
                                   class="w-full h-14 px-4 pr-12 bg-active-light dark:bg-active-dark rounded-xl text-base text-subtext-light dark:text-subtext-dark focus:outline-none focus:border-primary-light dark:focus:border-primary-dark"
                                   placeholder="添加标题"/>
                        <div class="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-subtext-light dark:text-subtext-dark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => _expense.Title)" class="text-red-500 text-sm mt-1"/>
                </div>

                <!-- 金额 -->
                <div class="px-4 py-3">
                    <div class="mb-2">
                        <label class="text-base font-medium text-text-light dark:text-text-dark">金额</label>
                    </div>
                    <div class="relative">
                        <InputNumber @bind-Value="_expense.Amount"
                                     step="0.01"
                                     class="w-full h-14 px-4 pr-12 bg-active-light dark:bg-active-dark rounded-xl text-base text-subtext-light dark:text-subtext-dark focus:outline-none focus:border-primary-light dark:focus:border-primary-dark"
                                     placeholder="$100"/>
                        <div class="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-subtext-light dark:text-subtext-dark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => _expense.Amount)" class="text-red-500 text-sm mt-1"/>
                </div>

                <!-- 类别 -->
                <div class="px-4 py-3">
                    <div class="mb-2">
                        <label class="text-base font-medium text-text-light dark:text-text-dark">类别</label>
                    </div>
                    <div class="relative bg-active-light dark:bg-active-dark rounded-xl">
                        <InputSelect @bind-Value="_expense.Category"
                                     class="w-full h-14 px-4 pr-12 bg-transparent text-base text-subtext-light dark:text-subtext-dark appearance-none focus:outline-none"
                                     placeholder="例如：餐饮">
                            <option value="" selected disabled>选择支出类别</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Name">@category.Name</option>
                            }
                            <option value="其他">其他</option>
                        </InputSelect>
                        <div class="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-subtext-light dark:text-subtext-dark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => _expense.Category)" class="text-red-500 text-sm mt-1"/>
                    @if (_expense.Category == "其他")
                    {
                        <div class="mt-2">
                            <div class="relative bg-active-light dark:bg-active-dark rounded-xl">
                                <InputText @bind-Value="CustomCategory"
                                           @onblur=@(() => BlazorMauiInterop.ShowToastAsync("输入的新类别将加入类别列表~"))
                                           class="w-full h-14 px-4 pr-12 bg-transparent text-base text-subtext-light dark:text-subtext-dark placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none"
                                           placeholder="请输入自定义类别"/>
                            </div>
                        </div>
                    }
                </div>

                <!-- 描述 -->
                <div class="px-4 py-3">
                    <div class="mb-2">
                        <label class="text-base font-medium text-text-light dark:text-text-dark">描述</label>
                    </div>
                    <div class="relative rounded-xl">
                        <InputTextArea @bind-Value="_expense.Description"
                                       class="w-full min-h-[100px] p-4 pr-12 bg-active-light dark:bg-active-dark rounded-xl text-base text-subtext-light dark:text-subtext-dark focus:outline-none focus:border-primary-light dark:focus:border-primary-dark resize-none"
                                       placeholder="添加描述"/>
                        <div class="absolute right-4 top-4 pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-subtext-light dark:text-subtext-dark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"/>
                            </svg>
                        </div>
                    </div>
                    <ValidationMessage For="@(() => _expense.Description)" class="text-red-500 text-sm mt-1"/>
                </div>

                <!-- 日期 -->
                <div class="px-4 py-3">
                    <div class="mb-2">
                        <label class="text-base font-medium text-text-light dark:text-text-dark">日期</label>
                    </div>
                    <div class="relative bg-active-light dark:bg-active-dark rounded-xl">
                        <input type="datetime-local"
                               class="w-full h-14 px-4 pr-12 bg-transparent text-base text-subtext-light dark:text-subtext-dark appearance-none focus:outline-none"
                          ha     value="@_expense.TimeOnSpend.ToString("yyyy-MM-ddTHH:mm")"
                               @onchange="@(e => OnDateTimeChanged(e))"/>
                        <div class="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-subtext-light dark:text-subtext-dark" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </div>
                    </div>
                </div>

                <!-- 保存按钮 -->
                <div class="px-4 py-3">
                    <button type="submit"
                            class="w-full h-12 bg-primary-light dark:bg-primary-dark text-white text-base font-bold rounded-[20px]">
                        保存
                    </button>
                </div>
            </EditForm>
        </div>
    </PageBody>
</FlexedPageComponent>

@code {
    [Parameter] public int TripId { get; set; }
    private string CustomCategory { get; set; }

    private List<ExpenseCategory> _categories = new();
    private Expense _expense = new();

    protected override async Task OnInitializedAsync() {
        _expense.TripId = TripId;
        _expense.TimeOnSpend = DateTime.Now;
        var categoriesRes = await ExpenseService.GetExpenseCategoriesAsync();
        if (categoriesRes is { IsSuccess: true, Data: not null }) _categories = categoriesRes.Data;
        else {
            await BlazorMauiInterop.ShowAlertAsync("获取支出类别失败");
        }
    }

    private void NavigateBack() {
        NavigationManager.NavigateBack();
    }

    private void OnDateTimeChanged(ChangeEventArgs e) {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime dateTime)) {
            _expense.TimeOnSpend = dateTime;
        }
    }

    private async Task HandleSubmit() {
        try {
            BlazorMauiInterop.ShowIndicator();
            if (_expense.Category == "其他" && !string.IsNullOrWhiteSpace(CustomCategory)) {
                _expense.Category = CustomCategory;
                var res = await ExpenseService.AddExpenseCategoryAsync(new ExpenseCategory() { Name = CustomCategory });
                if (!res.IsSuccess) {
                    await BlazorMauiInterop.ShowAlertAsync("添加支出类别失败");
                }
            }
            var result = await ExpenseService.AddExpenseAsync(_expense);
            if (result.IsSuccess) {
                await BlazorMauiInterop.ShowToastAsync("添加支出成功！");
                NavigateBack();
            }
            else {
                await BlazorMauiInterop.ShowAlertAsync("添加支出失败");
            }
        }
        catch (Exception) {
            await BlazorMauiInterop.ShowAlertAsync("添加支出失败");
        }
        finally {
            BlazorMauiInterop.HideIndicator();
        }
    }

}
