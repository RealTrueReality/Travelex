@page "/login"
@using Travelex.Models
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups
@using Travelex.Services
@using Travelex.Utils
@using Travelex.Components.Controls
@using Travelex.Components.Layout
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject BlazorMauiInterop BlazorMauiInterop



<FixedPageComponent>
    <TopBarTitle>
        登录页
    </TopBarTitle>
    <PageBody>
        @* Banner *@
        <div class="w-full h-[218px] bg-cover bg-center"
             style="background-image: url('images/loginPage/loginBanner.png')"></div>

        <EditForm Model="@_loggingModel" OnValidSubmit="HandleLoginAsync" class="p-4 flex flex-col gap-6">
            <DataAnnotationsValidator/>

            <div class="relative">
                <InputText @bind-Value="_loggingModel.UserName"
                           class="w-full h-14 px-4 rounded-xl bg-[#EFF2F4] text-[#607A89] focus:outline-none"
                           placeholder="用户名"/>
                <div class="absolute right-4 top-4">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-[#607A89]" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                    </svg>
                </div>
                <ValidationMessage For="@(() => _loggingModel.UserName)" class="text-red-500 text-sm mt-1"/>
            </div>

            <div class="relative">
                <InputText type="password" @bind-Value="_loggingModel.Password"
                           class="w-full h-14 px-4 rounded-xl bg-[#EFF2F4] text-[#607A89] focus:outline-none"
                           placeholder="密码"/>
                <div class="absolute right-4 top-4">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-[#607A89]" fill="none" viewBox="0 0 24 24"
                         stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"/>
                    </svg>
                </div>
                <ValidationMessage For="@(() => _loggingModel.Password)" class="text-red-500 text-sm mt-1"/>
            </div>

            <button type="button" class="text-sm text-[#607A89] text-center w-full">忘记密码?</button>

            <button type="submit" class="w-full h-12 bg-[#119BED] text-white font-bold rounded-[20px]">
                登陆
            </button>
            <button type="button" class="w-full h-12 bg-[#EFF2F4] text-black font-bold rounded-[20px]"
                    @onclick="() => { IsRegisterDialogVisible = true;_signUpModel=new ();}">
                注册
            </button>

        </EditForm>
        <SfDialog @bind-Visible="@IsRegisterDialogVisible"
                  Width="100%"
                  Height="auto"
                  IsModal="true"
                  ShowCloseIcon="true"
                  AllowDragging="false"
                  Target="#app"
                  Header="注册您的账户">
            <DialogAnimationSettings Effect="DialogEffect.SlideBottom" Duration="400"/>
            <DialogTemplates>
                <Content>
                    <div class="p-4">
                        <EditForm Model="@_signUpModel" OnValidSubmit="HandleRegisterAsync" class="p-4 flex flex-col gap-6">
                            <DataAnnotationsValidator/>

                            <div class="relative">
                                <InputText @bind-Value="_signUpModel.Name"
                                           class="w-full h-14 px-4 rounded-xl bg-[#EFF2F4] text-[#607A89] focus:outline-none"
                                           placeholder="姓名"/>
                                <div class="absolute right-4 top-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-[#607A89]" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M12 12c2.28 0 4-1.72 4-4s-1.72-4-4-4-4 1.72-4 4 1.72 4 4 4zM12 14c-3.33 0-10 1.67-10 5v1h20v-1c0-3.33-6.67-5-10-5z"/>
                                    </svg>
                                </div>
                                <ValidationMessage For="@(() => _signUpModel.Name)" class="text-red-500 text-sm mt-1"/>
                            </div>

                            <div class="relative">
                                <InputText @bind-Value="_signUpModel.UserName"
                                           class="w-full h-14 px-4 rounded-xl bg-[#EFF2F4] text-[#607A89] focus:outline-none"
                                           placeholder="用户名"/>
                                <div class="absolute right-4 top-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-[#607A89]" fill="none"
                                         viewBox="0 0 24 24"
                                         stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                                    </svg>
                                </div>
                                <ValidationMessage For="@(() => _signUpModel.UserName)" class="text-red-500 text-sm mt-1"/>
                            </div>

                            <div class="relative">
                                <InputText type="password" @bind-Value="_signUpModel.Password"
                                           class="w-full h-14 px-4 rounded-xl bg-[#EFF2F4] text-[#607A89] focus:outline-none"
                                           placeholder="密码"/>
                                <div class="absolute right-4 top-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-[#607A89]" fill="none"
                                         viewBox="0 0 24 24"
                                         stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"/>
                                    </svg>
                                </div>
                                <ValidationMessage For="@(() => _signUpModel.Password)" class="text-red-500 text-sm mt-1"/>
                            </div>

                            <button type="submit" class="w-full h-12 bg-[#119BED] text-white font-bold rounded-[20px]">
                                注册并登陆
                            </button>
                        </EditForm>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>
    </PageBody>
</FixedPageComponent>
@code {
    private LoggingModel _loggingModel = new();
    private SignUpModel _signUpModel = new();
    private bool IsRegisterDialogVisible { get; set; }

    private async Task HandleLoginAsync() {
        Console.WriteLine($"Login attempt with: {_loggingModel.ToJson()}");
        //显示加载(ActivityIndicator)
        BlazorMauiInterop.ShowIndicator();
        await Task.Delay(1800);
        try {
            var res = await AuthService.LogInAsync(_loggingModel);
            if (res.IsSuccess) {
                //重定向到首页
                BlazorMauiInterop.HideIndicator();
                NavigationManager.NavigateTo("/home", replace: true);
            }
            else {
                //显示弹出框警告
                await BlazorMauiInterop.ShowAlertAsync(res.Message ?? "登录失败");
                BlazorMauiInterop.HideIndicator();
            }
        }
        catch (Exception ex) {
            await BlazorMauiInterop.ShowAlertAsync(ex.Message);
        }
        finally {
            BlazorMauiInterop.HideIndicator();
        }
    }

    private async Task HandleRegisterAsync() {
        Console.WriteLine($"Register attempt with: {_signUpModel.ToJson()}");
        //显示加载(ActivityIndicator)
        BlazorMauiInterop.ShowIndicator();
        try {
            //注册
            var res = await AuthService.SignUpAsync(_signUpModel);
            
            if (res.IsSuccess) {
                //重定向到首页
                BlazorMauiInterop.HideIndicator();
                IsRegisterDialogVisible = false;
                await BlazorMauiInterop.ShowAlertAsync("注册成功！", title: "提示");
                NavigationManager.NavigateTo("/home", replace: true);
            }
            else {
                //显示弹出框警告
                await BlazorMauiInterop.ShowAlertAsync(res.Message ?? "注册失败");
                BlazorMauiInterop.HideIndicator();
            }
        }
        catch (Exception ex) {
            await BlazorMauiInterop.ShowAlertAsync(ex.Message);
        }
        finally {
            BlazorMauiInterop.HideIndicator();
        }
    }
}