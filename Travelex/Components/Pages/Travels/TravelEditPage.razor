@page "/travel/edit/{Id:int}"
@using Travelex.Entities
@using Travelex.Services
@using Travelex.Components.Controls
@using Travelex.Utils
@inject NavigationManager NavigationManager
@inject TravelService TravelService
@inject BlazorMauiInterop BlazorMauiInterop

<FlexedPageComponent>
    <TopBarLeft>
        <button @onclick="NavigateBack" class="p-2 text-[#252525]">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                 stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
    </TopBarLeft>
    <TopBarTitle>
        编辑行程
    </TopBarTitle>
    <PageBody>
        <div class="flex-1 p-4 overflow-auto">
            @if (_travel is not null)
            {
                <TravelForm 
                    Travel="@_travel"
                    Categories="@_categories"
                    SubmitButtonText="保存修改"
                    OnSubmit="HandleSubmit" />
            }
            else
            {
                <div class="flex items-center justify-center h-full">
                    <div class="text-gray-500">加载中...</div>
                </div>
            }
        </div>
    </PageBody>
</FlexedPageComponent>

@code {
    [Parameter]
    public int Id { get; set; }

    private Travel? _travel;
    private List<TravelCategory> _categories = [];

    protected override async Task OnInitializedAsync()
    {
        var categoriesRes = await TravelService.GetTravelCategoriesAsync();
        if (categoriesRes is { IsSuccess: true, Data: not null }) _categories = categoriesRes.Data;
        else {
            await BlazorMauiInterop.ShowAlertAsync("获取行程类别失败");
            
        }

        var result = await TravelService.GetTravelByIdAsync(Id);
        if (result is { IsSuccess: true, Data: not null })
        {
            _travel = result.Data;
        }
        else
        {
            await BlazorMauiInterop.ShowAlertAsync("获取行程信息失败");
            NavigateBack();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/travel/details/{Id}", replace: true);
    }

    private async Task HandleSubmit(Travel travel)
    {
        BlazorMauiInterop.ShowIndicator();
        try
        {
            var result = await TravelService.UpdateTravelAsync(travel);
            if (result.IsSuccess)
            {
                await BlazorMauiInterop.ShowToastAsync("更新行程成功");
                NavigateBack();
            }
            else
            {
                await BlazorMauiInterop.ShowAlertAsync("更新行程失败");
            }
        }
        catch (Exception)
        {
            await BlazorMauiInterop.ShowAlertAsync("更新行程失败");
        }
        finally
        {
            BlazorMauiInterop.HideIndicator();
        }
    }
}
