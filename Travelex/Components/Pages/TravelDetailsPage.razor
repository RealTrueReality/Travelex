@page "/travel/details/{TripId:int}"
@using Travelex.Components.Controls
@using Travelex.Entities
@using Travelex.Utils
@using Travelex.Services
@using Travelex.Extensions
@using Syncfusion.Blazor.Popups
@using SkeletonType = Syncfusion.Blazor.Notifications.SkeletonType
@inject TravelService TravelService;
@inject NavigationManager NavigationManager;
@inject BlazorMauiInterop BlazorMauiInterop;

<FlexedPageComponent>
    <TopBarLeft>
        <button @onclick="NavigateBack" class="p-2 text-[#252525]">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24"
                 stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
        </button>
    </TopBarLeft>
    <TopBarTitle>旅行详情</TopBarTitle>
    <TopBarRight>
        <button @onclick="NavigateToChart" class="p-2 text-[#252525]">
            <i class="fas fa-bar-chart text-xl"></i>
        </button>
    </TopBarRight>
    <PageBody>
        <div class="flex-1 overflow-auto">
            @if (IsLoading) {
                <!-- Shimmer Loading State -->
                <!-- Statistics Cards Shimmer -->
                <div class="grid grid-cols-2 gap-4 px-4">
                    <div class="bg-[#EFF2F4] rounded-xl p-6">
                        <p class="text-base font-medium text-[#111416] mb-2">旅行总支出</p>
                        <SfSkeleton Width="80%" Height="26px" Effect=ShimmerEffect.Wave></SfSkeleton>
                    </div>
                    <div class="bg-[#EFF2F4] rounded-xl p-6">
                        <p class="text-base font-medium text-[#111416] mb-2">支出数</p>
                        <SfSkeleton Width="50%" Height="26px" Effect=ShimmerEffect.Wave></SfSkeleton>
                    </div>
                </div>

                <!-- Travel Image Shimmer -->
                <div class="p-4">
                    <div class="rounded-xl overflow-hidden">
                        <SfSkeleton Width="100%" Height="192px" Effect=ShimmerEffect.Wave></SfSkeleton>
                    </div>
                </div>

                <!-- Travel Details Card Shimmer -->
                <div class="bg-white mx-4 rounded-xl p-6 shadow-sm border border-gray-200">
                    <!-- Title and Status -->
                    <div class="flex items-center justify-between mb-4">
                        <SfSkeleton Width="30%" Height="24px" Effect=ShimmerEffect.Wave></SfSkeleton>
                        <SfSkeleton Width="25%" Height="24px" Effect=ShimmerEffect.Wave
                                    CssClass="rounded-full"></SfSkeleton>
                    </div>

                    <!-- Description, Location, Date -->
                    <div class="space-y-3">
                        <div class="flex items-start space-x-2">
                            <SfSkeleton Width="18px" Height="18px" Effect=ShimmerEffect.Wave
                                        CssClass="mt-1"></SfSkeleton>
                            <SfSkeleton Width="50%" Height="18px" Effect=ShimmerEffect.Wave></SfSkeleton>
                        </div>
                        <div class="flex items-start space-x-2">
                            <SfSkeleton Width="18px" Height="18px" Effect=ShimmerEffect.Wave
                                        CssClass="mt-1"></SfSkeleton>
                            <SfSkeleton Width="50%" Height="18px" Effect=ShimmerEffect.Wave></SfSkeleton>
                        </div>
                        <div class="flex items-start space-x-2">
                            <SfSkeleton Width="18px" Height="18px" Effect=ShimmerEffect.Wave
                                        CssClass="mt-1"></SfSkeleton>
                            <SfSkeleton Width="50%" Height="18px" Effect=ShimmerEffect.Wave></SfSkeleton>
                        </div>
                        <div class="flex items-start space-x-2">
                            <SfSkeleton Width="18px" Height="18px" Effect=ShimmerEffect.Wave
                                        CssClass="mt-1"></SfSkeleton>
                            <SfSkeleton Width="50%" Height="18px" Effect=ShimmerEffect.Wave></SfSkeleton>
                        </div>
                        <div class="flex items-start space-x-2">
                            <SfSkeleton Width="18px" Height="18px" Effect=ShimmerEffect.Wave
                                        CssClass="mt-1"></SfSkeleton>
                            <SfSkeleton Width="50%" Height="18px" Effect=ShimmerEffect.Wave></SfSkeleton>
                        </div>
                    </div>
                </div>

                <!-- Expenses List Shimmer -->
                <div class="flex-1 overflow-auto mt-4">
                    @for (int i = 0; i < 4; i++) {
                        <div class="px-4 py-2">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <SfSkeleton Shape=SkeletonType.Square Width="46px" Height="46px"
                                                Effect=ShimmerEffect.Wave CssClass="rounded-lg"></SfSkeleton>
                                    <div class="ml-4">
                                        <SfSkeleton Width="116px" Height="16px" Effect=ShimmerEffect.Wave></SfSkeleton>
                                        <div class="flex items-center gap-2 mt-1">
                                            <SfSkeleton Width="142px" Height="12px"
                                                        Effect=ShimmerEffect.Wave></SfSkeleton>
                                        </div>
                                    </div>
                                </div>
                                <SfSkeleton Width="78px" Height="16px" Effect=ShimmerEffect.Wave></SfSkeleton>
                            </div>
                        </div>
                    }
                </div>
            }
            else {
                <!-- Statistics Cards -->
                <div class="grid grid-cols-2 gap-4 px-4">
                    <div class="bg-[#EFF2F4] rounded-xl p-6">
                        <p class="text-base font-medium text-[#111416] mb-2">旅行总支出</p>
                        <p class="text-2xl font-semibold text-[#111416]">¥@TotalAmount?.ToString("N2")</p>
                    </div>
                    <div class="bg-[#EFF2F4] rounded-xl p-6">
                        <p class="text-base font-medium text-[#111416] mb-2">支出数</p>
                        <p class="text-2xl font-semibold text-[#111416]">@ExpenseCount</p>
                    </div>
                </div>

                <!-- Travel Card -->
                <div class="p-4">
                    <div class="rounded-xl overflow-hidden h-[192px] w-full">
                        @if (!string.IsNullOrEmpty(_travel.ImageUrl)) {
                            @if (_travel.ImageUrl.StartsWith("images/")) {
                                <img src="@_travel.ImageUrl" class="w-full h-full object-cover"
                                     alt="@_travel.Title"/>
                            }
                            else if (File.Exists(_travel.ImageUrl)) {
                                <img
                                    src="data:image/jpeg;base64,@Convert.ToBase64String(File.ReadAllBytes(_travel.ImageUrl))"
                                    class="w-full h-full object-cover"
                                    alt="@_travel.Title"/>
                            }
                            else {
                                <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                    </svg>
                                </div>
                            }
                        }
                        else {
                            <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none"
                                     viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                                </svg>
                            </div>
                        }
                    </div>
                </div>

                <!-- Travel Details Card -->
                <div class="bg-white mx-4 rounded-xl p-6 shadow-sm border border-gray-200">
                    <div class="flex items-center justify-between mb-4">
                        <h2 class="text-xl font-semibold text-[#111416]">@_travel.Title</h2>
                        <span class="px-3 py-1 rounded-full text-base @GetStatusClass()">
                            @_travel.StatusForDisplay
                        </span>
                    </div>

                    <div class="space-y-3">
                        @if (!string.IsNullOrEmpty(_travel.Description)) {
                            <div class="flex items-start space-x-2">
                                <i class="fas fa-align-left text-gray-500 mt-1"></i>
                                <p class="text-gray-600">@_travel.Description</p>
                            </div>
                        }

                        <div class="flex items-start space-x-2">
                            <i class="fas fa-map-marker-alt text-gray-500 mt-1"></i>
                            @if (_travel is { Longitude: not null, Latitude: not null }) {
                                <p class="text-gray-600">@($"{_travel.LocationName} 经度: {_travel.Longitude.Value}, 纬度: {_travel.Latitude.Value}")</p>
                            }
                            else {
                                <p class="text-gray-600">@_travel.LocationName</p>
                            }

                        </div>

                        <div class="flex items-start space-x-2">
                            <i class="fas fa-calendar text-gray-500 mt-1"></i>
                            <p class="text-gray-600">
                                @_travel.StartDate?.ToString("yyyy-MM-dd") - @_travel.EndDate?.ToString("yyyy-MM-dd")
                            </p>
                        </div>

                        @if (!string.IsNullOrEmpty(_travel.CategoryName)) {
                            <div class="flex items-start space-x-2">
                                <i class="fas fa-tag text-gray-500 mt-1"></i>
                                <p class="text-gray-600">@_travel.CategoryName</p>
                            </div>
                        }

                        <div class="flex items-start space-x-2">
                            <i class="fas fa-clock text-gray-500 mt-1"></i>
                            <div class="text-gray-600">
                                <p>创建于：@_travel.AddedOn.ToString("yyyy-MM-dd HH:mm")</p>
                                @if (_travel.ModifiedOn.HasValue) {
                                    <p class="mt-0.5">修改于：@_travel.ModifiedOn.Value.ToString("yyyy-MM-dd HH:mm")</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Expenses List -->
                <div class="mt-4">
                    @foreach (var expense in Expenses) {
                        <div class="px-4 py-2">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center">
                                    <div class="w-12 h-12 bg-[#E8EFF2] rounded-lg flex items-center justify-center">
                                        <img src="images/expense.svg" class="h-5 w-5" alt="支出"/>
                                    </div>
                                    <div class="ml-4">
                                        <p class="text-base font-medium text-[#0C161C]">@expense.Title</p>
                                        <div class="flex items-center gap-2 text-sm text-gray-500">
                                            <span>@expense.TimeOnSpend.ToString("yyyy-MM-dd HH:mm")</span>
                                            <span>·</span>
                                            <span>@expense.Category</span>
                                        </div>
                                    </div>
                                </div>
                                <p class="text-base font-semibold text-[#0C161C]">¥@expense.Amount?.ToString("N2")</p>
                            </div>
                        </div>
                    }
                </div>

                <!-- Add Expense Button -->
                <div class="p-4">
                    <button @onclick="AddExpense" class="w-full bg-[#119BED] text-white h-12 rounded-[20px] text-base">
                        + 添加一笔支出
                    </button>
                </div>
            }
        </div>
    </PageBody>
</FlexedPageComponent>

@code {
    [Parameter] public int TripId { get; set; }
    private Travel _travel = new();
    private List<Expense> Expenses { get; set; } = [];
    private bool IsLoading { get; set; } = true;
    private double? TotalAmount => Expenses.Sum(e => e.Amount);
    private int ExpenseCount => Expenses.Count;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        try {
            var res = await TravelService.GetTravelByIdAsync(TripId, includeExpenses: true);
            if (res.IsSuccess) {
                if (res.Data is not null) {
                    _travel = res.Data;
                    if (_travel.Expense is not null) Expenses = _travel.Expense;
                }
                else {
                    await BlazorMauiInterop.ShowAlertAsync("该旅行不存在");
                }
            }
            else {
                await BlazorMauiInterop.ShowAlertAsync("服务器错误");
            }
        }
        catch (Exception e) {
            await BlazorMauiInterop.ShowAlertAsync("服务器错误");
        }
        finally {
            await Task.Delay(1280);
            IsLoading = false;
        }
    }

    private async Task AddExpense() {
        NavigationManager.NavigateToSubPage($"/expense/add/{TripId}");
    }

    private string GetStatusClass() {
        return _travel.Status switch {
            TravelStatus.Planning => "bg-yellow-100 text-yellow-600",
            TravelStatus.Ongoing => "bg-blue-100 text-blue-600",
            TravelStatus.Completed => "bg-green-100 text-green-600",
            TravelStatus.Cancelled => "bg-red-100 text-red-600",
            _ => ""
        };
    }

    private void NavigateBack() {
        NavigationManager.NavigateTo("/home", new NavigationOptions { ReplaceHistoryEntry = true });
    }

    private void NavigateToChart()
    {
        NavigationManager.NavigateToSubPage($"/travel/chart/{TripId}");
    }
}
