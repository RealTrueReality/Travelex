@inject IJSRuntime JSRuntime
@using Travelex.Services
@inject ILocationService LocationService

<div class="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center" @onclick="Close">
    <div class="bg-white w-full h-full md:w-[600px] md:h-[80vh] md:rounded-2xl flex flex-col" @onclick:stopPropagation>
        <!-- 顶部栏 -->
        <div class="flex items-center px-4 h-[60px] border-b">
            <button @onclick="Close" class="p-2 -ml-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <h2 class="flex-1 text-center text-lg font-medium">选择位置</h2>
            <button @onclick="ConfirmLocation" class="text-blue-500 font-medium">确定</button>
        </div>

        <!-- 搜索框 -->
        <div class="px-4 py-2">
            <div class="relative">
                <input @bind-value="@_searchKeyword" 
                       @bind-value:event="oninput"
                       @onkeyup="HandleSearch"
                       class="w-full h-10 pl-10 pr-4 bg-gray-100 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                       placeholder="搜索地点" />
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 absolute left-3 top-1/2 -translate-y-1/2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>
        </div>

        <!-- 搜索结果列表 -->
        @if (_searchResults.Any())
        {
            <div class="flex-none overflow-auto max-h-[200px] px-4">
                @foreach (var result in _searchResults)
                {
                    <button @onclick="() => SelectSearchResult(result)"
                            class="w-full px-4 py-2 text-left hover:bg-gray-100 rounded-lg">
                        <div class="font-medium">@result.Name</div>
                        <div class="text-sm text-gray-500">@result.Address</div>
                    </button>
                }
            </div>
        }

        <!-- 地图容器 -->
        <div class="flex-1 relative">
            @if (_hasError)
            {
                <div class="absolute inset-0 flex items-center justify-center bg-gray-100">
                    <div class="text-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-red-500 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                        <p class="text-gray-600">@_errorMessage</p>
                        <button @onclick="Close" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                            关闭
                        </button>
                    </div>
                </div>
            }
            <div id="map-container" class="absolute inset-0"></div>
        </div>
    </div>
</div>

@if (_hasError)
{
    <div class="fixed bottom-20 left-1/2 transform -translate-x-1/2 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50">
        <p class="text-center">@_errorMessage</p>
    </div>
}

@code {
    [Parameter]
    public EventCallback<(string Name, string Address, double Latitude, double Longitude)> OnLocationSelected { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private string _searchKeyword = "";
    private List<LocationResult> _searchResults = new();
    private DotNetObjectReference<MapPicker>? _dotNetRef;
    private bool _hasError = false;
    private string _errorMessage = "";
    private LocationResult? _selectedLocation;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initAMap", _dotNetRef);
        }
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchKeyword)) return;
        await JSRuntime.InvokeVoidAsync("searchLocation", _searchKeyword);
    }

    [JSInvokable]
    public void UpdateSearchResults(List<LocationResult> results)
    {
        _searchResults = results;
        StateHasChanged();
    }

    private async Task SelectSearchResult(LocationResult result)
    {
        _searchResults.Clear();
        _searchKeyword = "";
        await JSRuntime.InvokeVoidAsync("setMapCenter", 
            result.Latitude, 
            result.Longitude,
            result.Name,
            result.Address);
        await UpdateSelectedLocation(result);
    }

    [JSInvokable]
    public async Task UpdateSelectedLocation(LocationResult location)
    {
        _selectedLocation = location;
        StateHasChanged();
    }

    private async Task ConfirmLocation()
    {
        if (_selectedLocation != null)
        {
            await OnLocationSelected.InvokeAsync(
                (_selectedLocation.Name,
                 _selectedLocation.Address,
                 _selectedLocation.Latitude,
                 _selectedLocation.Longitude));
        }
        await Close();
    }

    [JSInvokable]
    public async Task<bool> CheckLocationPermission()
    {
        try
        {
            return await LocationService.CheckAndRequestLocationPermission();
        }
        catch (Exception ex)
        {
            _errorMessage = "获取位置权限失败";
            await InvokeAsync(StateHasChanged);
            return false;
        }
    }

    [JSInvokable]
    public async Task HandleMapError(string error)
    {
        _errorMessage = error;
        _hasError = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }

    public class LocationResult
    {
        public string Name { get; set; } = "";
        public string Address { get; set; } = "";
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}
