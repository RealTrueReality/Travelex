@using Travelex.Entities

<div class="relative touch-pan-y mb-4" @onclick:stopPropagation>
    <div class="relative rounded-xl p-4 transition-all duration-300 ease-in-out touch-pan-y @(TouchedTripId == Trip.Id ? "bg-[#EFF2F4]" : "bg-white")"
         style="@GetTripCardStyle()"
         @ontouchstart="@(e => HandleTouchStart(e))"
         @ontouchmove="@(e => HandleTouchMove(e))"
         @ontouchend="@(e => HandleTouchEnd())"
         @onclick="@(e => OnCardClick())">
        <div class="grid grid-cols-[1fr,auto] gap-4">
            <div>
                <h3 class="text-[#252525] text-base font-bold">@Trip.Title</h3>
                <p class="text-[#607A89] text-sm">
                    @Trip.StartDate?.ToString("yyyy年M月d日") - @Trip.EndDate?.ToString("d日")
                </p>

                <div class="flex items-center gap-2 mt-4">
                    <div class="bg-[#E8EFF2] rounded-lg h-10 w-10 flex items-center justify-center">
                        <img src="images/expense.svg" class="h-5 w-5" alt="支出"/>
                    </div>
                    <div>
                        <p class="text-[#252525] text-sm">总支出</p>
                        <p class="text-[#4C7C99] text-base font-medium">$1,200.00</p>
                    </div>
                </div>
            </div>

            <div class="rounded-xl overflow-hidden w-[130px] h-[101px]">
                @if (!string.IsNullOrEmpty(Trip.ImageUrl))
                {
                    @if (Trip.ImageUrl.StartsWith("images/"))
                    {
                        <img src="@Trip.ImageUrl" class="w-full h-full object-cover" alt="@Trip.Title"/>
                    }
                    else if (File.Exists(Trip.ImageUrl))
                    {
                        <img src="data:image/jpeg;base64,@Convert.ToBase64String(File.ReadAllBytes(Trip.ImageUrl))"
                             class="w-full h-full object-cover"
                             alt="@Trip.Title"/>
                    }
                    else
                    {
                        <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </div>
                    }
                }
                else
                {
                    <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="absolute top-0 bottom-0 right-0 w-20 bg-red-500 text-white flex items-center justify-center rounded-r-xl transition-transform duration-300 ease-out"
         style="@GetDeleteButtonStyle()"
         @onclick="@(() => OnDelete.InvokeAsync(Trip))">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
        </svg>
    </div>
</div>

@code {
    [Parameter]
    public Travel Trip { get; set; } = null!;

    [Parameter]
    public EventCallback<Travel> OnDelete { get; set; }

    [Parameter]
    public EventCallback<Travel> OnClick { get; set; }

    private int? TouchedTripId;
    private const double SwipeThreshold = 80.0;
    private const double ClickPreventionThreshold = 5.0;
    private double _touchStartX;
    private double _swipeOffset;

    private string GetTripCardStyle()
    {
        return $"transform: translateX({_swipeOffset}px);";
    }

    private string GetDeleteButtonStyle()
    {
        double opacity = Math.Min(1.0, Math.Abs(_swipeOffset) / SwipeThreshold);
        return $"opacity: {opacity};";
    }

    private void HandleTouchStart(TouchEventArgs e)
    {
        _touchStartX = e.Touches[0].ClientX;
        TouchedTripId = Trip.Id;
    }

    private void HandleTouchMove(TouchEventArgs e)
    {
        if (TouchedTripId != Trip.Id) return;

        double currentX = e.Touches[0].ClientX;
        double deltaX = currentX - _touchStartX;

        // 只允许左滑
        if (deltaX > 0)
        {
            deltaX = 0;
        }

        // 限制最大滑动距离
        if (deltaX < -SwipeThreshold)
        {
            deltaX = -SwipeThreshold;
        }

        _swipeOffset = deltaX;
        StateHasChanged();
    }

    private void HandleTouchEnd()
    {
        if (TouchedTripId != Trip.Id) return;

        // 如果滑动距离超过阈值的一半，自动展开删除按钮
        if (Math.Abs(_swipeOffset) > SwipeThreshold / 2)
        {
            _swipeOffset = -SwipeThreshold;
        }
        else
        {
            _swipeOffset = 0;
        }
        TouchedTripId = -1;
        StateHasChanged();
    }

    private async Task OnCardClick()
    {
        // 如果有滑动距离且大于阈值，不触发点击
        if (Math.Abs(_swipeOffset) > ClickPreventionThreshold)
        {
            return;
        }

        await OnClick.InvokeAsync(Trip);
    }
}
